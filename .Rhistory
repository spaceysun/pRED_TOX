ggplot(ebola.m, aes(as.Date(date, "%e %b %Y"), value)) +
geom_point(aes(color = variable)) +
coord_trans(y = "log10") + xlab("Date") +
labs(title = "Cumulative totals log scale") +
theme_bw()
ggplot(ebola.m, aes(seq, value)) +
geom_point(aes(color = variable)) +
coord_trans(y = "log10") + xlab("Date") +
labs(title = "Cumulative totals log scale") +
theme_bw()
test <- ebola.m$date
test
as.Date(test, '%d %b %Y')
?t.test
?rep
name <- rep(c('a','b'), each = 3)
name
sample1 <- c(123,122,134,156,176,185)
sample2 <- sample1 + 1
sample3 <- sample1 * 2
data <- data.frame(name, sample1, sample2, sample3)
data
?t.test
sleep
t.test(extra~group, data = sleep)
data
data1 <- subset(data, name == 'a')
data2 <- subset(data, name == 'b')
data1
data2
t.test(data1$sample1, data2$sample2)
name = c('A', 'B')
a1 = c(1,2)
a2 = a1 + 1
a3 = a1 * 5
b1 = a1 ^ 2
b2 = b1 + 5
b3 = b2 + b1
c1 = a1 / b1
c2 = c1 +3
c3 = c2 ^ 3
data = data.frame(name, a1, a2, a3, b1, b2, b3, c1, c2, c3)
data
t(data)
t(data[,-1])
unlist(t(data[,-1]))
class(t(data[,-1]))
class(unlist(t(data[,-1])))
matrix(unlist(t(data[,-1])),,3,T)
load(url('http://s3.amazonaws.com/assets.datacamp.com/course/dasi/cdc.Rdata'))
head(cdc)
load(url('http://s3.amazonaws.com/assets.datacamp.com/course/dasi/cdc.Rdata'))
names(cdc)
head(cdc)
tail(cdc)
library(XML)
library(ggplot2)
library(reshape2)
ebola <- readHTMLTable("http://en.wikipedia.org/wiki/Ebola_virus_epidemic_in_West_Africa", stringsAsFactors = FALSE)
ebola <- ebola$`Ebola cases and deaths by country and by date`
ebola
ebola.new <- ebola[2:71, 1:3]
ebola.new$cases[27]  <- "759"
ebola.new$deaths[27] <- "467"
ebola.new$cases[27]  <- "759"
ebola.new
ebola.new$cases[29]  <- "759"
ebola.new
head(ebola.new)
colnames(ebola.new) <- c("date", "cases", "deaths")
ebola.new$cases[29]  <- "759"
ebola.new$deaths[29]  <- "467"
ebola.new$cases  <- gsub(",", "", ebola.new$cases)
ebola.new$cases  <- as.numeric(ebola.new$cases)
ebola.new$deaths <- gsub(",", "", ebola.new$deaths)
ebola.new$deaths <- as.numeric(ebola.new$deaths)
ebola.m <- melt(ebola.new)
ebloa.m
ebola.m
data <- ebola.m$date
data
as.Date(data, '%e %b %Y')
ggplot(ebola.m, aes(as.Date(date, "%e %b %Y"), value)) +
geom_point(aes(color = variable)) +
coord_trans(y = "log10") + xlab("Date") +
labs(title = "Cumulative totals log scale") +
theme_bw()
ggplot(ebola.m, aes(as.Date(date, "%e %b %Y"), value)) +
geom_point(aes(color = variable))
ebola.m
ggplot(ebola.m, aes(as.Date(date, "%e %b %Y"), value)) +
geom_point()
as.Date(ebola.m$date, '%e %b %Y')
as.Date(ebola.m$date, "%e %b %Y")
as.Date(ebola.m$date, format = "%e %b %Y")
as.Date(ebola.m$date[1], format = "%e %b %Y")
ebola.m$date
ebola.new
head(ebola.new)
head(ebola.m)
ebola.new[6,1]
as.Date(ebola.new[6,1])
as.Date(ebola.new[6,1], format = "%e %b %Y")
as.Date(ebola.new[6,1], format = "%e %b %Y")
ggplot(ebola.m, aes(as.Date(date, "%e %b %Y"), value)) + geom_point(aes(color = variable))
ebola.new <- ebola[2:71, 1:3]
ebola.new
ebola
colnames(ebola.new) <- c("date", "cases", "deaths")
ebola.new
ebola.new[1,]
ebola.new[27,]
ebola.new[28,]
ebola.new$cases[28]  <- "759"
ebola.new$deaths[28] <- "467"
ebola.new$cases  <- gsub(",", "", ebola.new$cases)
ebola.new$cases  <- as.numeric(ebola.new$cases)
ebola.new$deaths <- gsub(",", "", ebola.new$deaths)
ebola.new$deaths <- as.numeric(ebola.new$deaths)
ebola.new
ebola.m <- melt(ebola.new)
ebola.m
ggplot(ebola.m, aes(as.Date(date, "%e %b %Y"), value)) +
geom_point(aes(color = variable))
as.Date(ebola.m$date, "%e %b %Y")
ebola.m
ebola.m$date
library(XML)
library(ggplot2)
library(reshape2)
# get all tables on the page
ebola <- readHTMLTable("http://en.wikipedia.org/wiki/Ebola_virus_epidemic_in_West_Africa",
stringsAsFactors = FALSE)
# thankfully our table has a name; it is table #5
# this is not something you can really automate
head(names(ebola))
# [1] "Ebola virus epidemic in West Africa"
# [2] "Nigeria Ebola areas-2014"
# [3] "Treatment facilities in West Africa"
# [4] "Democratic Republic of Congo-2014"
# [5] "Ebola cases and deaths by country and by date"
# [6] "NULL"
ebola <- ebola$`Ebola cases and deaths by country and by date`
# again, manual examination reveals that we want rows 2-71 and columns 1-3
ebola.new <- ebola[2:71, 1:3]
colnames(ebola.new) <- c("date", "cases", "deaths")
# need to fix up a couple of cases that contain text other than the numbers
ebola.new$cases[27]  <- "759"
ebola.new$deaths[27] <- "467"
# get rid of the commas; convert to numeric
ebola.new$cases  <- gsub(",", "", ebola.new$cases)
ebola.new$cases  <- as.numeric(ebola.new$cases)
ebola.new$deaths <- gsub(",", "", ebola.new$deaths)
ebola.new$deaths <- as.numeric(ebola.new$deaths)
# the days in the dates are encoded 1-31
# are we there yet? quick and dirty attempt to reproduce Wikipedia plot
ebola.m <- melt(ebola.new)
ggplot(ebola.m, aes(as.Date(date, "%e %b %Y"), value)) +
geom_point(aes(color = variable)) +
coord_trans(y = "log10") + xlab("Date") +
labs(title = "Cumulative totals log scale") +
theme_bw()
ebola.m
ebola.m$date
ggplot(ebola.m, aes(as.Date(date, "%e %b %Y"), value)) +
+     geom_point(aes(color = variable))
ggplot(ebola.m, aes(as.Date(date, "%e %b %Y"), value)) + geom_point(aes(color = variable))
ebolam
ebola.m
ebola.new
ebola.new[28,]
ebola.new[28,2:3] = c(100, 100)
ebola.new
ebola.m <- melt(ebola.new)
ebola.m
ggplot(ebola.m, aes(as.Date(date, "%e %b %Y"), value)) +
geom_point(aes(color = variable))
ebola.m[1,1]
?substring
substring(ebola.m[1,1], 3)
substring(ebola.m[1,1], 3, 3)
substring(ebola.m[6,1], 3, 3)
paste("0", ebola.m[i,1])
paste("0", ebola.m[i,1], sep='')
for (i in nrow(ebola.m)) {
if (substring(ebola.m[i,1], 3, 3) != " ") {
ebola.m[i,1] = paste("0", ebola.m[i,1], sep="")
}
}
ebola.m
for (i in 1:nrow(ebola.m)) {
if (substring(ebola.m[i,1], 3, 3) != " ") {
ebola.m[i,1] = paste("0", ebola.m[i,1], sep="")
}
}
ebola.m
ggplot(ebola.m, aes(as.Date(date, "%d %b %Y"), value)) +
geom_point(aes(color = variable))
as.Date(ebola.m$date, '%d %b %Y')
as.Date(ebola.m$date[6,1], '%d %b %Y')
as.Date(ebola.m[6,1], '%d %b %Y')
ebola.m$date
as.Date(ebola.m$date, format = "%d, %b, %Y")
as.Date(ebola.m$date[1], format = "%d, %b, %Y")
as.date
?as.date
?as.Date
ad.Date(ebola.m$date, '%d %b %Y')
as.Date(ebola.m$date, '%d %b %Y')
test = '1970-1-1'
test = '1970-01-01'
test = '19701201'
as.Date(test, '%Y%e%d')
test = '19700801'
as.Date(test, '%Y%e%d')
test = '19500801'
as.Date(test, '%Y%e%d')
test = '19501001'
as.Date(test, '%Y%e%d')
test = '19501003'
as.Date(test, '%Y%e%d')
test = '19501003'
as.Date(test, '%Y%b%d')
test = '19501003'
as.Date(test, '%Y%m%d')
as.Date(ebola.m$date, '%d %m %Y')
test = '20 Sep 2014'
as.Date(test, '%d %b %Y')
test = '19501003'
as.Date(test, '%Y%m%d')
test = '20 Sep 2014'
as.Date(test, '%e %b %Y')
test = '20 Sep 2014'
as.Date(test, "%e %b %Y")
test = '20 Sep 2014'
test = '19501003'
as.Date(test, '%Y%m%d')
test = '20 Sep 2014'
as.Date(test, "%e %b %Y")
test = 'Sep 2014'
as.Date(test, "%b %Y")
test = '11 Sep 2014'
as.Date(test, "%e %b %Y")
test = ' 2 Sep 2014'
as.Date(test, "%e %b %Y")
test = '2 Sep 2014'
as.Date(test, "%d %b %Y")
test = '02 Sep 2014'
as.Date(test, "%d %b %Y")
test = '11 Sep 2014'
as.Date(test, "%d %b %Y")
test = '11 Sept 2014'
as.Date(test, "%d %b %Y")
ebola.m$date
test = '28 Mar 2014'
as.Date(test, '%e %d %Y')
as.Date(test, '%e %b %Y')
test = '11 Sep 2014'
as.Date(test, "%e %b %Y")
test = '11 Sep 2014'as.Date(test, "%e %b %Y")
test = '11 Sep 2014'
as.Date(test, "%e %b %Y")
test = '19501003'
as.Date(test, '%Y%m%d')
test = 'Sep 11 2014'
as.Date(test, '%b %e %Y')
test = '11 Sep 2014'
as.Date(test, "%e %b %Y")
as.Date(test, "%d %b %Y")
as.Date(test, "%d %b %Y")
as.Date(test, "%d %b %Y")
test = '11 Sep 2014'
as.Date(test, "%d %b %Y")
test = '11 Sep 14'
as.Date(test, "%d %b %y")
as.Date(test, '%d %b %Y')
test = '11 Sep 2014'
as.Date(test, '%d %B %Y')
test = '11 Sep 2014'
as.Date(test, '%d %b %Y')
test = '11 Apr 2014'
as.Date(test, '%d %b %Y')
test = '11 Apr 2014'
as.Date('test', '%d %b %Y')
test = '11Apr2014'
as.Date(test, '%d%b%Y')
ebola.m
as.Date('22JUN01',format='%d%b%y')
as.Date('22JUN2001',format='%d%b%Y')
test = '19501003'
as.Date(test, '%Y%m%d')
as.Date('22JUN1999',format='%d%b%Y')
test = '22Jun1999'
as.Date(test,format='%d%b%Y')
?as.Date
test = '22Jun1999'
as.Date(test, format = "%d%b%Y")
test
as.Date("09 July 1998", "%d %B %Y")
as.Date(strftime(paste("1998",1:12,"09", sep = "-"), "%d %B %Y"), "%d %B %Y")
as.Date(strftime(paste("1998",1:12,"09", sep = "-"), "%d %B %Y"), "%d %B %Y")
test = '22Jun1999'
as.Date(test,format='%d%b%Y')
test = '19501003'
as.Date(test, '%Y%m%d')
test = '22Jun1999'
as.Date(test,format='%d%b%Y')
test = '02 Sep 2014'
as.Date(test, "%d %b %Y")
as.Date(test, "%e %b %Y")
test = '02 Sep 2014'
as.Date(test, "%e %b %Y")
test = '02 Sep 2014'
as.Date(test, '%e %b %Y')
test = '02 May 2014'
as.Date(test, '%e %B %Y')
test = '02 May 2014'
as.Date(test, '%e %b %Y')
test = '19501003'
as.Date(test, '%Y%m%d')
str2="1-jan-95"
as.Date(str2,"%d-%b-%y")
str2="11-jan-95"
as.Date(str2,"%d-%b-%y")
str2="jan-11-95"
as.Date(str2,"%b-%d-%y")
str2="10-11-95"
as.Date(str2,"%m-%d-%y")
str2="Dec-11-95"
as.Date(str2,"%b-%d-%y")
??locale
Sys.setlocale()
Sys.setlocale('LC_TIME', 'English')
test = '22Jun1999'
as.Date(test,format='%d%b%Y')
ebola.new <- ebola[2:71, 1:3]
colnames(ebola.new) <- c("date", "cases", "deaths")
ebola.new$cases[28]  <- "759"
ebola.new$deaths[28] <- "467"
ebola.new
ebola.new$cases  <- gsub(",", "", ebola.new$cases)
ebola.new$cases  <- as.numeric(ebola.new$cases)
ebola.new$deaths <- gsub(",", "", ebola.new$deaths)
ebola.new$deaths <- as.numeric(ebola.new$deaths)
ebola.m <- melt(ebola.new)
ggplot(ebola.m, aes(as.Date(date, "%e %b %Y"), value)) +
geom_point(aes(color = variable)) +
coord_trans(y = "log10") + xlab("Date") +
labs(title = "Cumulative totals log scale") +
theme_bw()
ggplot(ebola.m, aes(as.Date(date, "%e %b %Y"), value)) +
geom_point(aes(color = variable))
as.Date(ebola.m$date, '%d %b %Y')
as.Date(ebola.m$date, '%e %b %Y')
source('V:/RND_Center/Research/Pharmaceutical Sciences/PS_only/Toxicology/MiniTox - pRED China/MiniTox-Tox-14-006 (TLR7 2720)/Data/summary by R/style.R')
options(width=200)
filename <- 'Minitox.xlsx'
studyinfo <- read.xlsx(filename, sheetIndex = 1)
library(xlsx)
filename <- 'Minitox.xlsx'
studyinfo <- read.xlsx(filename, sheetIndex = 1)
# Showing study information
paste(studyinfo[1,1], ':', studyinfo[1,2])
study_title <- paste('Title', ': ', studyinfo[3,2], ' ', 'A ', studyinfo[15,2], '-Day Minitox Oral Toxicity Study in Male Rats', sep='')
print(study_title)
# Importing body weight data from excel files
bw <- read.xlsx(filename, sheetIndex = 2)
# Creating a new dataframe with only main animal data
getwd()
getwd()
install.packages(c("xlsx", "knitr"))
install.packages("knitr")
install.packages("xlsx")
install.packages(c("psych", "plyr", "car", "pgirmess", "ggplot2"))
install.packages("ggplot2")
install.packages('pgirmess')
install.packages("car")
install.packages("psych")
install.packages("psych")
install.packages("gdata")
library(Tmisc)
install_github('stephenturner/Tmisc')
library)devtools
library(devtools)
install.packages('devtools')
library(devtools)
install_github('stephenturner/Tmisc')
library(Tmisc)
install.packages('Biobase')
devtools::install_github('stephenturner/Tmisc')
library(Tmisc)
library(dplyr)
install.packages("dplyr")
library(dplyr)
set.seed(42)
ndset = 64
n = 100
d = data_frame()
d = data_frame(
set = factor(rep(1:ndset, each = n)),
x = rnorm(n * ndset),
y = rep(rnorm(n), ndset))
d
ggplot(d, aes(x, y)) + geom_point() + geom_smooth(method = lm) + facet_wrap(~set)
library(ggplot)
install.packages("ggplot")
library(ggplot2)
ggplot(d, aes(x, y)) + geom_point() + geom_smooth(method = lm) + facet_wrap(~set)
library(dplyr)
results = d %>%
group_by(set) %>%
do(mod = lm(y ~ x, data = .)) %>%
summarize(set = set, p = anova(mod)$"Pr(>F)"[1]) %>%
mutate(bon = p.adjust(p, method = "bonferroni")) %>%
mutate(fdr = p.adjust(p, method = "bonferroni"))
results
install.packages("qqman")
library(qqman)
qq(results$p)
install.packages('kernlab')
library(kernlab)
data(spam)
spam
set.seed(3435)
trainIndicator = rbinom(4601, size = 1, prob = 0.5)
table(trainIndicator)
trainSpam = spam[trainIndicator == 1, ]
trainSpam = spam[trainIndicator == 0, ]
trainSpam = spam[trainIndicator == 1, ]
trainSpam
names(trainSpam)
head(trainMain)
head(trainSpam)
trainSpam
name(trainSpam)
names(trainSpam)
plot(trainSpam$capitalAve ~ trainSpam$type)
plot(trainSpam[, 1:4])
trainSpam[, 1:4]
head(trainSpam[,1:4])
plot(log(trainSpam[, 1:4])+1)
hCluster
?hCluster
??hCluster
hCluster = hclust(dist(t(trainSpam[, 1:57])))
?t
?dist
?hclust
hCluser
hCluster
plot(hCluster)
library(kernlab)
data(spam)
set.seed(3435)
trainIndicator = rbinom(4601, size = 1, prob = 0.5)
table(trainIndicator)
trainSpam = spam[trainIndicator == 1, ]
trainSpam = spam[trainIndicator == 0, ]
?REP
?rep
install.packages('boot')
?reformulate
?glm
df
delta
trainSpam$numType = as.numeric(trainSpam$type) - 1
costFunction = function(x, y) sum(x ! = (y > 0.5))
cvError = rep(NA, 55)
library(boot)
for (i in 1:55) {
lmFormula = reformulate(names(trainSpam)[i], response = 'numType')
glmFit = glm(lmFormula, family = 'binomial', data = trainSpam)
cvError[i] = cv.glm(trainSpam, glmFit, costFunction, 2)$delta[2]
}
trainSpam$numType = as.numeric(trainSpam$type) - 1
costFunction = function(x, y) sum(x! = (y > 0.5))
trainSpam$numType = as.numeric(trainSpam$type) - 1
costFunction = function(x, y) sum(x != (y > 0.5))
cvError = rep(NA, 55)
library(boot)
for (i in 1:55) {
lmFormula = reformulate(names(trainSpam)[i], response = 'numType')
glmFit = glm(lmFormula, family = 'binomial', data = trainSpam)
cvError[i] = cv.glm(trainSpam, glmFit, costFunction, 2)$delta[2]
}
trainSpam$numType = as.numeric(trainSpam$type) - 1
costFunction = function(x, y) sum(x != (y > 0.5))
cvError = rep(NA, 55)
library(boot)
for (i in 1:55) {
lmFormula = reformulate(names(trainSpam)[i], response = 'numType')
glmFit = glm(lmFormula, family = 'binomial', data = trainSpam)
cvError[i] = cv.glm(trainSpam, glmFit, costFunction, 2)$delta[2]
}
names(trainSpam)[which.min(cvError)]
?predict
?SET.SEED
?set.seed
install.packages('RapidNCA')
library(knitr)
?pandoc
getwd()
setwd('c:/users/suns11/desktop/r project/~tox')
pandoc('tox_project_png', format = 'docx')
pandoc('tox_project_png.md', format = 'docx')
pandoc('tox_project_png', format = 'latex')
pandoc('tox_project_png.md', format = 'latex')
pandoc('tox_project_png.md', format = 'docx')
pandoc('tox_project_png.md', format = 'docx')
pandoc('tox_project_png.md', format = 'docx')
pandoc('tox_project_png.md', format = 'docx')
library(knitr)
